// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Article {
  id        Int              @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  comments  ArticleComment[]
  IsLiked   IsLiked[]
}

model Product {
  id          Int              @id @default(autoincrement())
  name        String
  description String
  price       Int
  tags        String[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  comments    ProductComment[]
  IsLiked     IsLiked[]
}

model User {
  id                Int              @id @default(autoincrement())
  email             String           @unique
  nickname          String
  image             String
  encryptedPassword String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  ProductComment    ProductComment[]
  IsLiked           IsLiked[]
}

model ArticleComment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int
}

model ProductComment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
}

model IsLiked {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  articleId Int?
  productId Int?
  article   Article? @relation(fields: [articleId], references: [id])
  product   Product? @relation(fields: [productId], references: [id])
}
